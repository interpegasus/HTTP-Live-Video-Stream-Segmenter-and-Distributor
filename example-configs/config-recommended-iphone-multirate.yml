temp_dir: '/tmp/'
segment_prefix: 'sample'
index_prefix: 'stream'

# type of logging: STDOUT, FILE
log_type: 'STDOUT'
#log_type: 'FILE'
#log_file: '/tmp/streamer.log'
# levels: DEBUG, INFO, WARN, ERROR
log_level: 'DEBUG'

# where the origin video is going to come from
#input_location: '-'
input_location: '/tmp/test.avi'

# segment length in seconds
segment_length: 10 

# this is the URL where the stream (ts) files will end up
# if this location is the same as the location where the m3u8 
# index is then leave it blank
url_prefix: 

# how many segments to keep in the index
index_segment_count: 15

# this command is used for multirate encodings and is what pushes the encoders
source_command: 'cat %s'

# This is the location of the segmenter
segmenter_binary: './live_segmenter'

# the encoding profile to use
encoding_profile: [ 'cell_150k', 'cell_240k', 'cell_440k', 'wifi_640k' ]

# The upload profile to use
transfer_profile: 'copy_dev'

#
# Encoding profiles
#
cell_150k:
  ffmpeg_command: "ffmpeg -er 4 -i %s -f mpegts -acodec libmp3lame -ar 32000 -ab 48k -vf scale='trunc(24+(sar*dar)+.5)*16:ow/dar/sar+.5' -vcodec libx264 -threads 0 -profile baseline -level 30 -preset medium -b 110k -maxrate 110k -bufsize 110k -r 10 -keyint_min 10 -g 30 -async 2 - | %s %s %s %s %s"
  bandwidth: 158000

cell_240k:
  ffmpeg_command: "ffmpeg -er 4 -i %s -f mpegts -acodec libmp3lame -ar 32000 -ab 48k -vf scale='trunc(24+(sar*dar)+.5)*16:ow/dar/sar+.5' -vcodec libx264 -threads 0 -profile baseline -level 30 -preset medium -b 200k -maxrate 200k -bufsize 200k -r 12 -keyint_min 12 -g 45 -async 2 - | %s %s %s %s %s"
  bandwidth: 248000

cell_440k:
  ffmpeg_command: "ffmpeg -er 4 -i %s -f mpegts -acodec libmp3lame -ar 32000 -ab 48k -vf scale='trunc(24+(sar*dar)+.5)*16:ow/dar/sar+.5' -vcodec libx264 -threads 0 -profile baseline -level 30 -preset medium -b 400k -maxrate 400k -bufsize 400k -keyint_min 25 -g 90 -async 2 - | %s %s %s %s %s"
  bandwidth: 448000

wifi_640k:
  ffmpeg_command: "ffmpeg -er 4 -i %s -f mpegts -acodec libmp3lame -ar 32000 -ab 48k -vf scale=640:ow/sar/dar+.5 -vcodec libx264 -threads 0 -profile baseline -level 30 -preset medium -b 600k -maxrate 600k -bufsize 600k -keyint_min 25 -g 90 -async 2 - | %s %s %s %s %s"
  bandwidth: 648000

#
# Transfer profiles
#
s3_dev:
  transfer_type: 's3'
  bucket_name: 'bucket'
  key_prefix: 'stream0001'
  aws_api_key: 'key'
  aws_api_secret: 'secret'

ftp_dev:
  transfer_type: 'ftp'
  remote_host: '192.168.1.1'
  user_name: 'user'
  password: 'pass'
  directory: 'html/streamingvideo'

## Multiple ftp server example:
multi_ftp_dev:
  transfer_type: 'ftp'
  remote_host: ['first-server.com', 'second-server.com']
  user_name: ['firstserveruser', 'seconduserserver']
  password: ['firstserverpass', 'secondserverpass']
  directory: ['first/server/dir', 'second/server/dir']
### If the remote_host is an array, all the other (user_name, password, directory) has to be arrays to, and has to have the same item number as the remote_host array, else it won't work and bad things will happen!

scp_dev:
  transfer_type: 'scp'
  remote_host: '192.168.1.1'
  user_name: 'root'
  #password: 'pass'
  directory: '/web/sites/test.com/html/streamingvideo'

copy_dev:
  transfer_type: 'copy'
  directory: '/var/www/html/streamingvideo'
  
cf_dev:
  transfer_type: 'cf'
  container: 'container'
  username: 'username'
  api_key: 'api_key'
  key_prefix: 'stream0001'
  